{"version":3,"sources":["components/Cover.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Cover","fs","height","width","tunes","art","artSize","background","fontColor","position","style","className","src","alt","map","t","i","key","App","React","useState","tuneBuffer","state","dispatch","handleChange","e","target","value","handleSliderChange","_","newVal","submitTune","action","onSubmit","preventDefault","Typography","Slider","min","max","onChange","TextField","label","margin","color","c","hex","FormControl","InputLabel","Select","MenuItem","List","ListItem","fullWidth","index","IconButton","edge","aria-label","onClick","filter","Delete","onKeyPress","keyCode","Send","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47c72930.chunk.js","sourcesContent":["import React from 'react'\n\ninterface CoverProps {\n  height: number\n  width: number\n  fs: number\n  tunes: string[]\n  art: string\n  artSize: number\n  background: string\n  fontColor: string\n  position: string\n}\n\nconst Cover: React.FC<CoverProps> = ({\n  fs,\n  height,\n  width,\n  tunes,\n  art,\n  artSize,\n  background,\n  fontColor,\n  position,\n}) => {\n  const style = ({\n    '--cover-font-s': `${fs}px`,\n    '--cover-font-c': fontColor,\n    '--cover-w': `${width}px`,\n    '--cover-h': `${height}px`,\n    '--cover-bg': background,\n    '--cover-art:': `url(\"${art}\")`,\n    '--cover-art-pos': position,\n    '--cover-art-s': `${artSize}px`,\n  } as any) as React.CSSProperties\n\n  return (\n    <div className=\"cover\" style={style}>\n      <div className=\"cover__bg\">\n        <img width={width*1.5} src={art} alt=\"\" className=\"cover__art__img\" />\n      </div>\n      <div className=\"cover__wrapper\">\n      <img height={artSize} src={art} alt=\"\" className=\"cover__art\"/> \n        <ol className=\"cover__tunes\">\n          {tunes.map((t, i) => (\n            <>\n              <span className=\"cover__tunes__item\" key={i}>\n                {i + 1}. {t}\n              </span>\n              <br />\n            </>\n          ))}\n        </ol>\n      </div>\n    </div>\n  )\n}\n\nexport default Cover\n","import React from 'react'\nimport Cover from './components/Cover'\nimport {\n  TextField,\n  List,\n  ListItem,\n  Select,\n  InputLabel,\n  FormControl,\n  MenuItem,\n  IconButton,\n  Slider,\n  Typography,\n} from '@material-ui/core/'\nimport { Send, Delete } from '@material-ui/icons'\nimport { SliderPicker, ChromePicker } from 'react-color'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = React.useState({\n    fs: 18,\n    fontColor: '#fefefe',\n    height: 440,\n    width: 780,\n    tunes: [\n      'Saint James Infirmary Blues ~ Jon Batiste',\n      'Nocturne No. 1 in D Minor ~ Jon Batiste',\n      'The Very Thought Of You ~ Jon Batiste',\n      'Una Rosa Blanca ~ Ibrahim Maalouf',\n      'Happy Face ~ Ibrahim Maalouf',\n    ],\n    art:\n      'https://jambands.com/wp-content/uploads/2018/07/761fa2b5-4ff6-4348-a966-4f7b51429543_1000x1000.jpg',\n    artSize: 310,\n    tuneBuffer: '',\n    background: '#2d6086',\n    position: 'auto 0 auto auto',\n  })\n\n  const handleChange = (key: string) => (e: any) =>\n    dispatch({ ...state, [key]: e.target.value })\n\n  const handleItemChange = (index: number, value: string) =>\n    dispatch({\n      ...state,\n      tunes: state.tunes.map((t, i) => (i === index ? value : t)),\n    })\n\n  const handleSliderChange = (key: string) => (_: any, newVal: any) =>\n    dispatch({ ...state, [key]: newVal })\n\n  const submitTune = () =>\n    dispatch({\n      ...state,\n      tuneBuffer: '',\n      tunes: [...state.tunes, state.tuneBuffer],\n    })\n\n  const deleteTune = (index: number) => () =>\n    dispatch({\n      ...state,\n      tunes: state.tunes.filter((_, i) => i !== index),\n    })\n\n  return (\n    <div className=\"wrapper\">\n      <aside className=\"aside\">\n        <form\n          action=\"\"\n          onSubmit={e => {\n            e.preventDefault()\n          }}\n          className=\"aside__form\"\n        >\n          <div>\n            <Typography>Cover Width: {state.width}</Typography>\n            <Slider\n              value={state.width}\n              min={100}\n              max={1250}\n              onChange={handleSliderChange('width')}\n            />\n          </div>\n          <div>\n            <Typography>Cover Height: {state.height}</Typography>\n            <Slider\n              value={state.height}\n              min={100}\n              max={1250}\n              onChange={handleSliderChange('height')}\n            />\n          </div>\n          <div>\n            <Typography>Coverart size: {state.artSize}</Typography>\n            <Slider\n              value={state.artSize}\n              min={100}\n              max={1000}\n              onChange={handleSliderChange('artSize')}\n            />\n          </div>\n          <div>\n            <Typography>Font Size: {state.fs}</Typography>\n            <Slider\n              value={state.fs}\n              min={5}\n              max={32}\n              onChange={handleSliderChange('fs')}\n            />\n          </div>\n          <TextField\n            label=\"Cover art\"\n            value={state.art}\n            onChange={handleChange('art')}\n            margin=\"normal\"\n          />\n          <h2 className=\"aside__label\">cover bg:</h2>\n          <ChromePicker\n            color={state.background}\n            onChange={c => dispatch({ ...state, background: c.hex })}\n          />\n          <FormControl className=\"aside__form__select\">\n            <InputLabel>Cover Art Position</InputLabel>\n            <Select value={state.position} onChange={handleChange('position')}>\n              <MenuItem value=\"0 auto auto auto\">Top</MenuItem>\n              <MenuItem value=\"auto auto auto auto\">Center</MenuItem>\n              <MenuItem value=\"auto auto 0 auto\">Bottom</MenuItem>\n            </Select>\n          </FormControl>\n\n          <h2 className=\"aside__label\">font color:</h2>\n          <ChromePicker\n            color={state.fontColor}\n            onChange={c => dispatch({ ...state, fontColor: c.hex })}\n          />\n\n          {/*Items*/}\n          <h2 className=\"aside__label\">tunes:</h2>\n          <List>\n            {state.tunes.map((t, i) => (\n              <ListItem key={i}>\n                <TextField\n                  fullWidth={true}\n                  value={t}\n                  onChange={e => handleItemChange(i, e.target.value)}\n                />\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"send\"\n                  onClick={deleteTune(i)}\n                >\n                  <Delete />\n                </IconButton>\n              </ListItem>\n            ))}\n            <ListItem>\n              <TextField\n                onKeyPress={e => {\n                  if (e.keyCode === 13) submitTune()\n                }}\n                fullWidth={true}\n                value={state.tuneBuffer}\n                onChange={handleChange('tuneBuffer')}\n              />\n              <IconButton edge=\"end\" aria-label=\"send\" onClick={submitTune}>\n                <Send />\n              </IconButton>\n            </ListItem>\n          </List>\n        </form>\n      </aside>\n      <main\n        className=\"main\"\n        style={{ '--bg': state.background } as React.CSSProperties}\n      >\n        <Cover {...state} />\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}